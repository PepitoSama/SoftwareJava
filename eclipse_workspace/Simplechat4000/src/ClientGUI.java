import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.*;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JTextArea;import client.*;import common.*;/** * This class constructs the UI for a chat client. It implements the chat * interface in order to activate the display() method. Warning: Some of the * code here is cloned in ServerConsole * * @author Fran&ccedil;ois B&eacute;langer * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave;re * @version July 2000 */public class ClientGUI extends JFrame implements ActionListener, ChatIF {	/**	 * 	 */	private static final long serialVersionUID = 1L;	// Class variables *************************************************	/**	 * The default port to connect on.	 */	final public static int DEFAULT_PORT = 5555;	// Instance variables **********************************************	/**	 * The instance of the client that created this ConsoleChat.	 */	JTextArea textArea = new JTextArea(15, 5);	JButton send = new JButton("Envoyer");	ChatClient client;	JFrame fenetre;	// Constructors ****************************************************	/**	 * Constructs an instance of the ClientConsole UI.	 *	 * @param host The host to connect to.	 * @param port The port to connect on.	 */	public ClientGUI(String host, int port, String name) {		// Titre de la fenêtre		super("SuperChat4000");		// Dimension de la fenêtre		Toolkit tk = Toolkit.getDefaultToolkit();		Dimension d = tk.getScreenSize();		int hauteurEcran = d.height;		int largeurEcran = d.width;		setSize(largeurEcran / 4, hauteurEcran / 2);		setLocation(largeurEcran / 4, hauteurEcran / 4);				// Ajout des composants		this.add(textArea, BorderLayout.NORTH);		this.add(send, BorderLayout.SOUTH);		// Ajout du/des listener		send.addActionListener(this);				// Lancement du serveur		try {			client = new ChatClient(host, port, name, this);		} catch (IOException exception) {			System.out.println("Error: Can't setup connection!" + " Terminating client.");			System.exit(1);		}		this.getContentPane();		this.setVisible(true);	}	// Instance methods ************************************************	/**	 * This method overrides the method in the ChatIF interface. It displays a	 * message onto the screen.	 *	 * @param message The string to be displayed.	 */	public void display(String message) {		this.textArea.setText(message);	}	// Class methods ***************************************************	/**	 * This method is responsible for the creation of the Client UI.	 *	 * @param args[0] The host to connect to.	 */	public static void main(String[] args) {		String host = "";		int port; // The port number		String name = ""; // user id		try {			host = args[0];			port = Integer.parseInt(args[1]);			name = args[2];		} catch (ArrayIndexOutOfBoundsException e) {			host = "localhost";			port = DEFAULT_PORT;			name = "default";		}		ClientGUI chat = new ClientGUI(host, port, name);		// Wait for message		while(true);	}	@Override	public void actionPerformed(ActionEvent e) {		Object source = e.getSource();		if (source == send) {			String textContent = textArea.getText();			if (textContent.length() > 0) {				client.handleMessageFromClientUI(textContent);				this.textArea.setText("");			}		}	}}//End of ConsoleChat class