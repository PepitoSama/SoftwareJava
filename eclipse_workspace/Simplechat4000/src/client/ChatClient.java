package client;// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com import common.*;import java.io.*;import java.util.Observable;import java.util.Observer;import com.lloseng.ocsf.client.*;/** * This class overrides some of the methods defined in the abstract superclass * in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient implements Observer {	// Class variables ***************************************************	/**	 * Indicates a close of the connection to server.	 */	public static final String CONNECTION_CLOSED = "#OC:Connection closed.";	/**	 * Indicates establishment of a connection to server.	 */	public static final String CONNECTION_ESTABLISHED = "#OC:Connection established.";	// Instance variables **********************************************	/**	 * The interface type variable. It allows the implementation of the display	 * method in the client.	 */	ChatIF clientUI;	ObservableClient client;	// Constructors ****************************************************	/**	 * Constructs an instance of the chat client.	 *	 * @param host     The server to connect to.	 * @param port     The port number to connect on.	 * @param clientUI The interface type variable.	 */	public ChatClient(String host, int port, String name, ChatIF clientUI) throws IOException {		client = new ObservableClient(host, port);		client.addObserver(this);		this.clientUI = clientUI;	}	// Instance methods ************************************************	/**	 * This method handles all data that comes in from the server.	 *	 * @param msg The message from the server.	 */	public void handleMessageFromServer(Object msg) {		clientUI.display(msg.toString());	}	/**	 * This method handles all data coming from the UI	 *	 * @param message The message from the UI.	 */	public void handleMessageFromClientUI(String message) {		if (message.startsWith("#")) {			if (message.equals("#logoff")) {				if (client.isConnected()) {					try {						client.sendToServer("#logoff");						client.closeConnection();					} catch (IOException e) {						e.printStackTrace();					}				} else {					System.out.println("Déja déconnecté");				}			} else if (message.equals("#quit")) {				if (client.isConnected()) {					try {						client.sendToServer("#logoff");						client.closeConnection();						System.exit(0);					} catch (IOException e) {						e.printStackTrace();					}				} else {					System.out.println("Déja déconnecté");				}			} else if (message.startsWith("#login")) {				if (!client.isConnected()) {					String[] tab = message.split(" ");					if (tab.length == 2) {						try {							client.openConnection();							client.sendToServer(message);						} catch (IOException e) {							clientUI.display("Could not send message to server.  Terminating client.");							quit();						}					} else {						System.out.println("Veillez saisir un speudo !");					}				} else {					System.out.println("Déja connecté !");				}			} else if (message.equals("#gethost")) {				System.out.println(client.getHost());			} else if (message.equals("#getport")) {				System.out.println(client.getPort());			} else if (message.startsWith("#sethost")) {				if (!client.isConnected()) {					String[] tab = message.split(" ");					client.setHost(tab[1]);				}			} else if (message.startsWith("#setport")) {				if (!client.isConnected()) {					String[] tab = message.split(" ");					client.setPort(Integer.parseInt(tab[1]));				}			}		} else {			try {				client.sendToServer(message);			} catch (IOException e) {				clientUI.display("Could not send message to server.  Terminating client.");				quit();			}		}	}	/**	 * This method terminates the client.	 */	public void quit() {		try {			client.closeConnection();		} catch (IOException e) {		}		System.exit(0);	}	protected void connectionClosed() {		System.err.println("La connexion avec le serveur a été interrompu");	}	protected void connectionException(Exception exception) {		System.err.println("Exception serveur deconnecté");	}	@Override	public void update(Observable arg0, Object arg1) {		if (arg1 instanceof String) {			if (arg1.equals(CONNECTION_CLOSED)) {				System.out.print("Connection was closed");			} else if (arg1.equals(CONNECTION_ESTABLISHED)) {				System.out.println("You are connected !");			}		} else if (arg1 instanceof Exception) {			System.out.println(((Exception)arg1).getMessage());		}		else {			System.out.println("Message received");			handleMessageFromServer(arg1);		}	}}//End of ChatClient class