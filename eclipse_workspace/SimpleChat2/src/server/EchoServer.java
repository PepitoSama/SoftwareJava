package server;import java.io.*;import ocsf.server.*;/** * This class overrides some of the methods in the abstract  * superclass in order to give more functionality to the server. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave;re * @author Fran&ccedil;ois B&eacute;langer * @author Paul Holden * @version July 2000 */public class EchoServer extends AbstractServer {  //Constructors ****************************************************    /**   * Constructs an instance of the echo server.   *   * @param port The port number to connect on.   */  public EchoServer(int port)   {    super(port);  }    //Instance methods ************************************************    /**   * This method handles any messages received from the client.   *   * @param msg The message received from the client.   * @param client The connection from which the message originated.   */  public void handleMessageFromClient(Object msg, ConnectionToClient client) {	  if(msg instanceof String && ((String)msg).startsWith("#")) {		  if(msg.equals("#logoff")) {			  try {				  client.close();			  } catch (IOException e) {				  e.printStackTrace();			  }		  } else if(((String)msg).startsWith("#login")) {			  String[] tab = ((String) msg).split(" ");			  client.setInfo("id", tab[1]);		  }	  } else {		  System.out.println("Message received: " + msg + " from " + client.getInfo("id"));		  this.sendToAllClients((String)client.getInfo("id") + " " + msg);	  }	    }    public void handleMessageFromServerUI(String message) {	  if(message instanceof String && ((String)message).startsWith("#")) {		  if(message.equals("#quit")) {			  stopListening();			  try {				close();			} catch (IOException e) {				e.printStackTrace();			}			System.exit(0);		  } else if(message.equals("#stop")) {			  System.out.println("Ok i stop");			  stopListening();		  } else if(message.equals("#close")) {			  stopListening();			  try {				close();			} catch (IOException e) {				e.printStackTrace();			}		  } else if(message.startsWith("#setport")) {			String [] tab = message.split(" ");			setPort(Integer.parseInt(tab[1]));		  } else if(message.equals("#start")) {			  try {				listen();			} catch (IOException e) {				e.printStackTrace();			}		  } else if(message.equals("#getport")) {			  	System.out.println(getPort());		  }	  } else {		  sendToAllClients("SERVER MSG > " + message);	  }  }      /**   * This method overrides the one in the superclass.  Called   * when the server starts listening for connections.   */  protected void serverStarted()  {    System.out.println      ("Server listening for connections on port " + getPort());  }    /**   * This method overrides the one in the superclass.  Called   * when the server starts listening for connections.   */  protected void clientConnected(ConnectionToClient client) {	  System.out.println("Client connected");  }    /**   * This method overrides the one in the superclass.  Called   * when the server starts listening for connections.   */    synchronized protected void clientDisconnected(ConnectionToClient client) {	  System.err.println("Client disconnected");  }    synchronized protected void clientException(ConnectionToClient client, Throwable exception) {	  System.err.println("Client Exception error");  }    /**   * This method overrides the one in the superclass.  Called   * when the server stops listening for connections.   */  protected void serverStopped()  {    System.out.println      ("Server has stopped listening for connections.");  }}//End of EchoServer class